/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Lease } from "./Lease";
import { LeaseCountArgs } from "./LeaseCountArgs";
import { LeaseFindManyArgs } from "./LeaseFindManyArgs";
import { LeaseFindUniqueArgs } from "./LeaseFindUniqueArgs";
import { CreateLeaseArgs } from "./CreateLeaseArgs";
import { UpdateLeaseArgs } from "./UpdateLeaseArgs";
import { DeleteLeaseArgs } from "./DeleteLeaseArgs";
import { TenantFindManyArgs } from "../../tenant/base/TenantFindManyArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { Property } from "../../property/base/Property";
import { LeaseService } from "../lease.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Lease)
export class LeaseResolverBase {
  constructor(
    protected readonly service: LeaseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Lease",
    action: "read",
    possession: "any",
  })
  async _leasesMeta(
    @graphql.Args() args: LeaseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Lease])
  @nestAccessControl.UseRoles({
    resource: "Lease",
    action: "read",
    possession: "any",
  })
  async leases(@graphql.Args() args: LeaseFindManyArgs): Promise<Lease[]> {
    return this.service.leases(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Lease, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Lease",
    action: "read",
    possession: "own",
  })
  async lease(
    @graphql.Args() args: LeaseFindUniqueArgs
  ): Promise<Lease | null> {
    const result = await this.service.lease(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lease)
  @nestAccessControl.UseRoles({
    resource: "Lease",
    action: "create",
    possession: "any",
  })
  async createLease(@graphql.Args() args: CreateLeaseArgs): Promise<Lease> {
    return await this.service.createLease({
      ...args,
      data: {
        ...args.data,

        property: args.data.property
          ? {
              connect: args.data.property,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Lease)
  @nestAccessControl.UseRoles({
    resource: "Lease",
    action: "update",
    possession: "any",
  })
  async updateLease(
    @graphql.Args() args: UpdateLeaseArgs
  ): Promise<Lease | null> {
    try {
      return await this.service.updateLease({
        ...args,
        data: {
          ...args.data,

          property: args.data.property
            ? {
                connect: args.data.property,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lease)
  @nestAccessControl.UseRoles({
    resource: "Lease",
    action: "delete",
    possession: "any",
  })
  async deleteLease(
    @graphql.Args() args: DeleteLeaseArgs
  ): Promise<Lease | null> {
    try {
      return await this.service.deleteLease(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Tenant], { name: "tenants" })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async findTenants(
    @graphql.Parent() parent: Lease,
    @graphql.Args() args: TenantFindManyArgs
  ): Promise<Tenant[]> {
    const results = await this.service.findTenants(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Property, {
    nullable: true,
    name: "property",
  })
  @nestAccessControl.UseRoles({
    resource: "Property",
    action: "read",
    possession: "any",
  })
  async getProperty(@graphql.Parent() parent: Lease): Promise<Property | null> {
    const result = await this.service.getProperty(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(@graphql.Parent() parent: Lease): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
