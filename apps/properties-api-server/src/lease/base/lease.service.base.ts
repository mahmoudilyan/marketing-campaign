/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Lease as PrismaLease,
  Tenant as PrismaTenant,
  Property as PrismaProperty,
} from "@prisma/client";

export class LeaseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LeaseCountArgs, "select">): Promise<number> {
    return this.prisma.lease.count(args);
  }

  async leases(args: Prisma.LeaseFindManyArgs): Promise<PrismaLease[]> {
    return this.prisma.lease.findMany(args);
  }
  async lease(args: Prisma.LeaseFindUniqueArgs): Promise<PrismaLease | null> {
    return this.prisma.lease.findUnique(args);
  }
  async createLease(args: Prisma.LeaseCreateArgs): Promise<PrismaLease> {
    return this.prisma.lease.create(args);
  }
  async updateLease(args: Prisma.LeaseUpdateArgs): Promise<PrismaLease> {
    return this.prisma.lease.update(args);
  }
  async deleteLease(args: Prisma.LeaseDeleteArgs): Promise<PrismaLease> {
    return this.prisma.lease.delete(args);
  }

  async findTenants(
    parentId: string,
    args: Prisma.TenantFindManyArgs
  ): Promise<PrismaTenant[]> {
    return this.prisma.lease
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .tenants(args);
  }

  async getProperty(parentId: string): Promise<PrismaProperty | null> {
    return this.prisma.lease
      .findUnique({
        where: { id: parentId },
      })
      .property();
  }

  async getTenant(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.lease
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
