/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Owner as PrismaOwner,
  Property as PrismaProperty,
} from "@prisma/client";

export class OwnerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.OwnerCountArgs, "select">): Promise<number> {
    return this.prisma.owner.count(args);
  }

  async owners(args: Prisma.OwnerFindManyArgs): Promise<PrismaOwner[]> {
    return this.prisma.owner.findMany(args);
  }
  async owner(args: Prisma.OwnerFindUniqueArgs): Promise<PrismaOwner | null> {
    return this.prisma.owner.findUnique(args);
  }
  async createOwner(args: Prisma.OwnerCreateArgs): Promise<PrismaOwner> {
    return this.prisma.owner.create(args);
  }
  async updateOwner(args: Prisma.OwnerUpdateArgs): Promise<PrismaOwner> {
    return this.prisma.owner.update(args);
  }
  async deleteOwner(args: Prisma.OwnerDeleteArgs): Promise<PrismaOwner> {
    return this.prisma.owner.delete(args);
  }

  async findProperties(
    parentId: string,
    args: Prisma.PropertyFindManyArgs
  ): Promise<PrismaProperty[]> {
    return this.prisma.owner
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .properties(args);
  }
}
