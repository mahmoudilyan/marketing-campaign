/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Owner } from "./Owner";
import { OwnerCountArgs } from "./OwnerCountArgs";
import { OwnerFindManyArgs } from "./OwnerFindManyArgs";
import { OwnerFindUniqueArgs } from "./OwnerFindUniqueArgs";
import { CreateOwnerArgs } from "./CreateOwnerArgs";
import { UpdateOwnerArgs } from "./UpdateOwnerArgs";
import { DeleteOwnerArgs } from "./DeleteOwnerArgs";
import { PropertyFindManyArgs } from "../../property/base/PropertyFindManyArgs";
import { Property } from "../../property/base/Property";
import { OwnerService } from "../owner.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Owner)
export class OwnerResolverBase {
  constructor(
    protected readonly service: OwnerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Owner",
    action: "read",
    possession: "any",
  })
  async _ownersMeta(
    @graphql.Args() args: OwnerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Owner])
  @nestAccessControl.UseRoles({
    resource: "Owner",
    action: "read",
    possession: "any",
  })
  async owners(@graphql.Args() args: OwnerFindManyArgs): Promise<Owner[]> {
    return this.service.owners(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Owner, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Owner",
    action: "read",
    possession: "own",
  })
  async owner(
    @graphql.Args() args: OwnerFindUniqueArgs
  ): Promise<Owner | null> {
    const result = await this.service.owner(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Owner)
  @nestAccessControl.UseRoles({
    resource: "Owner",
    action: "create",
    possession: "any",
  })
  async createOwner(@graphql.Args() args: CreateOwnerArgs): Promise<Owner> {
    return await this.service.createOwner({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Owner)
  @nestAccessControl.UseRoles({
    resource: "Owner",
    action: "update",
    possession: "any",
  })
  async updateOwner(
    @graphql.Args() args: UpdateOwnerArgs
  ): Promise<Owner | null> {
    try {
      return await this.service.updateOwner({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Owner)
  @nestAccessControl.UseRoles({
    resource: "Owner",
    action: "delete",
    possession: "any",
  })
  async deleteOwner(
    @graphql.Args() args: DeleteOwnerArgs
  ): Promise<Owner | null> {
    try {
      return await this.service.deleteOwner(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Property], { name: "properties" })
  @nestAccessControl.UseRoles({
    resource: "Property",
    action: "read",
    possession: "any",
  })
  async findProperties(
    @graphql.Parent() parent: Owner,
    @graphql.Args() args: PropertyFindManyArgs
  ): Promise<Property[]> {
    const results = await this.service.findProperties(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
